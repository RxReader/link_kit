File pubspec = new File(project.projectDir.parentFile, 'pubspec.yaml')
String yaml = pubspec.text
// Using \s*['|"]?([^\n|'|"]*)['|"]? to extract version number.
java.util.regex.Matcher versionMatcher = java.util.regex.Pattern.compile("^version:\\s*['|\"]?([^\\n|'|\"]*)['|\"]?\$", java.util.regex.Pattern.MULTILINE).matcher(yaml)
versionMatcher.find()
String library_version = versionMatcher.group(1).replaceAll("\\+", "-")

group 'io.github.v7lin.link_kit'
version library_version

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.2'
        classpath 'org.yaml:snakeyaml:1.17'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    resourcePrefix 'link_kit'

    File flutter_project_dir = rootProject.projectDir.parentFile
    def cfg = new org.yaml.snakeyaml.Yaml().load(new File(flutter_project_dir, 'pubspec.yaml').text)
    def deep_link = cfg.link_kit?.deep_link?.with { URI.create(it) }
    def app_link = cfg.link_kit?.android?.app_link?.with { URI.create(it) }

    defaultConfig {
        minSdkVersion 16

        manifestPlaceholders += [
                DEEP_LINK_SCHEME: deep_link?.scheme ?: '',
        ]
        if (app_link != null) {
            manifestPlaceholders += [
                    APP_LINK_SCHEME: app_link.scheme,
                    APP_LINK_HOST: app_link.host,
                    APP_LINK_PATH: "${app_link.path}.*",
            ]
        }
    }

    if (app_link != null) {
        flavorDimensions 'vendor'

        productFlavors {
            vendor {
                dimension 'vendor'
            }
        }
    }
}
